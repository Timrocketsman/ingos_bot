#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω–≥–æ—Å—Å—Ç—Ä–∞—Ö: Telegram-–±–æ—Ç –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
v1.6: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω parse_mode MarkdownV2 —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞ user_id, –æ—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import logging
import time
from datetime import datetime
from urllib.parse import quote
import re

from telebot import TeleBot, types
from telebot.apihelper import ApiTelegramException

# ====================== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ======================
TOKEN      = "7373585495:AAEK4JwHdbHzfQwfr2zNNknZDwpObCnPXZ0"
WHATSAPP   = "+79898325577"       # WhatsApp –º–µ–Ω–µ–¥–∂–µ—Ä–∞
MANAGER_ID = 6983437462           # Telegram ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)

if ':' not in TOKEN:
    logger.critical("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–æ–µ—Ç–æ—á–∏—è! –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–æ–∫–µ–Ω.")
    exit(1)

bot = TeleBot(TOKEN)

# ====================== –•—Ä–∞–Ω–∏–ª–∏—â–µ ======================
sessions = {}   # chat_id -> session dict
profiles = {}   # chat_id -> profile dict

# ====================== –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ ======================
SERVICES = {
    "auto": {
        "title": "–ê–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ üöó",
        "fields": [
            {"key":"brand","text":"–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è","opts":['LADA', 'Hyundai', 'Toyota', 'Kia', 'Volkswagen', 'Renault', 'Skoda', 'BMW', 'Mercedes', 'Audi', 'Ford', 'Nissan', '–î—Ä—É–≥–∞—è']},
            {"key":"model","text":"–ú–æ–¥–µ–ª—å","dynamic": True},
            {"key":"year","text":"–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞","opts":["2025","2024","2023","2022","2021","2020","2019","2018","2017","2016","2015","2014","2013","2012","2011","2010","–î—Ä—É–≥–æ–π"]},
            {"key":"body","text":"–¢–∏–ø –∫—É–∑–æ–≤–∞","opts":["–°–µ–¥–∞–Ω","–•—ç—Ç—á–±–µ–∫","–£–Ω–∏–≤–µ—Ä—Å–∞–ª","–ö—Ä–æ—Å—Å–æ–≤–µ—Ä","–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫","–î—Ä—É–≥–æ–µ"]},
            {"key":"engine","text":"–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è","opts":["–ë–µ–Ω–∑–∏–Ω","–î–∏–∑–µ–ª—å","–≠–ª–µ–∫—Ç—Ä–æ","–ì–∏–±—Ä–∏–¥"]},
            {"key":"power","text":"–ú–æ—â–Ω–æ—Å—Ç—å (–ª.—Å.)","opts":["<100","100‚Äì150","151‚Äì200","201‚Äì300",">300"]},
            {"key":"experience","text":"–°—Ç–∞–∂ –≤–æ–¥–∏—Ç–µ–ª—è (–ª–µ—Ç)","opts":["0‚Äì3","4‚Äì10","11‚Äì20",">20"]},
            {"key":"city","text":"–ì–æ—Ä–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏","opts":["–ú–æ—Å–∫–≤–∞","–°–ü–±","–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥","–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫","–î—Ä—É–≥–æ–π"]}
        ]
    },
    "life": {
        "title": "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∂–∏–∑–Ω–∏ üë§",
        "fields": [
            {"key":"sum","text":"–°—É–º–º–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è","opts":["500k","1M","2M","5M","10M"]},
            {"key":"age","text":"–í–æ–∑—Ä–∞—Å—Ç","opts":["18‚Äì30","31‚Äì50","51+"]},
            {"key":"period","text":"–°—Ä–æ–∫","opts":["5 –ª–µ—Ç","10 –ª–µ—Ç","15 –ª–µ—Ç","–¥–æ 65 –ª–µ—Ç"]}
        ]
    },
    "health": {
        "title": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ (–î–ú–°) üè•",
        "fields": [
            {"key":"program","text":"–ü—Ä–æ–≥—Ä–∞–º–º–∞","opts":["–ë–∞–∑–æ–≤–∞—è","–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è","VIP"]},
            {"key":"age","text":"–í–æ–∑—Ä–∞—Å—Ç","opts":["18‚Äì30","31‚Äì50","51+"]},
            {"key":"region","text":"–†–µ–≥–∏–æ–Ω –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è","opts":["–ú–æ—Å–∫–≤–∞","–°–ü–±","–î—Ä—É–≥–æ–π"]},
            {"key":"dentistry","text":"–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è","opts":["–ù–µ –Ω—É–∂–Ω–∞","–ë–∞–∑–æ–≤–∞—è","–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è","VIP"]}
        ]
    },
    "property": {
        "title": "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∏–º—É—â–µ—Å—Ç–≤–∞ üè†",
        "fields": [
            {"key":"type","text":"–¢–∏–ø –∏–º—É—â–µ—Å—Ç–≤–∞","opts":["–ö–≤–∞—Ä—Ç–∏—Ä–∞","–î–æ–º","–î–∞—á–∞","–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è"]},
            {"key":"value","text":"–°—Ç—Ä–∞—Ö–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å","opts":["<1M","1M‚Äì5M","5M‚Äì10M",">10M"]},
            {"key":"address","text":"–õ–æ–∫–∞—Ü–∏—è","opts":["–ì–æ—Ä–æ–¥","–ó–∞–≥–æ—Ä–æ–¥","–î—Ä—É–≥–æ–µ"]},
            {"key":"risks","text":"–†–∏—Å–∫–∏","opts":["–ë–∞–∑–æ–≤—ã–µ","+–ó–∞—Ç–æ–ø–ª–µ–Ω–∏–µ","+–ö—Ä–∞–∂–∞","–ü–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ"]}
        ]
    },
    "travel": {
        "title": "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π ‚úàÔ∏è",
        "fields": [
            {"key":"destination","text":"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ","opts":["–ï–≤—Ä–æ–ø–∞","–ê–∑–∏—è","–†–æ—Å—Å–∏—è","–ê–º–µ—Ä–∏–∫–∞","–î—Ä—É–≥–æ–µ"]},
            {"key":"duration","text":"–°—Ä–æ–∫ –ø–æ–µ–∑–¥–∫–∏","opts":["<7 –¥–Ω–µ–π","7‚Äì14 –¥–Ω–µ–π","15‚Äì30 –¥–Ω–µ–π",">30 –¥–Ω–µ–π"]},
            {"key":"purpose","text":"–¶–µ–ª—å","opts":["–û—Ç–¥—ã—Ö","–ë–∏–∑–Ω–µ—Å","–°–ø–æ—Ä—Ç","–£—á—ë–±–∞"]},
            {"key":"coverage","text":"–ü–æ–∫—Ä—ã—Ç–∏–µ","opts":["35k EUR","50k EUR","100k EUR","–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"]}
        ]
    }
}

CAR_MODELS = {
    'LADA': ['Vesta', 'Granta', 'Niva', '–î—Ä—É–≥–∞—è'],
    'Hyundai': ['Solaris', 'Creta', 'Tucson', '–î—Ä—É–≥–∞—è'],
    'Toyota': ['Camry', 'Corolla', 'RAV4', '–î—Ä—É–≥–∞—è'],
    'Kia': ['Rio', 'Sportage', 'Ceed', '–î—Ä—É–≥–∞—è'],
    'Volkswagen': ['Polo', 'Tiguan', 'Golf', '–î—Ä—É–≥–∞—è'],
    'Renault': ['Logan', 'Duster', 'Arkana', '–î—Ä—É–≥–∞—è'],
    'Skoda': ['Rapid', 'Octavia', 'Kodiaq', '–î—Ä—É–≥–∞—è'],
    'BMW': ['3 Series', '5 Series', 'X5', '–î—Ä—É–≥–∞—è'],
    'Mercedes': ['C-Class', 'E-Class', 'GLC', '–î—Ä—É–≥–∞—è'],
    'Audi': ['A4', 'A6', 'Q5', '–î—Ä—É–≥–∞—è'],
    'Ford': ['Focus', 'Fiesta', 'Kuga', '–î—Ä—É–≥–∞—è'],
    'Nissan': ['Qashqai', 'X-Trail', 'Juke', '–î—Ä—É–≥–∞—è'],
    '–î—Ä—É–≥–∞—è': ['–î—Ä—É–≥–∞—è']
}

def escape_markdown(text: str) -> str:
    escape_chars = r'_*\[\]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

def ensure_session(cid):
    if cid not in sessions:
        sessions[cid] = {
            "step": "profile",
            "cat": None,
            "idx": 0,
            "answers": {},
            "last": None,
            "temp_brand": None,
            "pending_input": None,
            "message_ids": []
        }

def safe_send(cid, *a, **kw):
    for _ in range(3):
        try:
            msg = bot.send_message(cid, *a, **kw)
            sessions.get(cid, {}).get("message_ids", []).append(msg.message_id)
            return msg
        except ApiTelegramException as e:
            logger.warning(f"send_message API error: {e}")
            time.sleep(1)
    return None

def delete_previous_messages(cid):
    s = sessions.get(cid)
    if s and s.get("message_ids"):
        for msg_id in s["message_ids"]:
            try:
                bot.delete_message(cid, msg_id)
            except Exception as e:
                logger.warning(f"Failed to delete message {msg_id}: {e}")
        s["message_ids"] = []

def delete_last(cid):
    s = sessions.get(cid)
    if s and s.get("last"):
        try:
            bot.delete_message(cid, s["last"])
        except:
            pass
        s["last"] = None

def ask_profile(cid):
    ensure_session(cid)
    delete_last(cid)
    prof = profiles.get(cid)
    kb = types.InlineKeyboardMarkup(row_width=2)
    if prof:
        kb.add(types.InlineKeyboardButton(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {prof.get('name','–ù–µ —É–∫–∞–∑–∞–Ω–æ')}", callback_data="PF|use"))
    kb.add(types.InlineKeyboardButton("–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="PF|new"))
    msg = safe_send(cid, "üë§ –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=kb)
    if msg:
        sessions[cid]["last"] = msg.message_id

def ask_category(cid):
    ensure_session(cid)
    delete_last(cid)
    kb = types.InlineKeyboardMarkup(row_width=2)
    for key, data in SERVICES.items():
        kb.add(types.InlineKeyboardButton(data["title"], callback_data=f"CAT|{key}"))
    msg = safe_send(cid, "üèõÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è:", reply_markup=kb)
    if msg:
        sessions[cid]["last"] = msg.message_id

def ask_field(cid):
    s = sessions[cid]
    cat, idx = s["cat"], s["idx"]
    fields = SERVICES[cat]["fields"]

    if idx >= len(fields):
        return show_summary(cid)

    field = fields[idx]
    kb = types.InlineKeyboardMarkup(row_width=3)

    if field.get("dynamic") and field["key"] == "model":
        brand = s.get("temp_brand")
        opts = CAR_MODELS.get(brand, CAR_MODELS['–î—Ä—É–≥–∞—è'])
    else:
        opts = field["opts"]

    for opt in opts:
        kb.add(types.InlineKeyboardButton(opt, callback_data=f"F|{opt}"))

    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="BACK"))
    msg = safe_send(cid, f"–®–∞–≥ {idx+1}/{len(fields)} ‚Äî {field['text']}:", reply_markup=kb)
    if msg:
        s["last"] = msg.message_id

def show_summary(cid):
    delete_last(cid)
    s = sessions[cid]
    prof = profiles.get(cid, {"name": "–ù–µ —É–∫–∞–∑–∞–Ω–æ", "phone": "–ù–µ —É–∫–∞–∑–∞–Ω–æ"})
    lines = [
        f"üìù –ó–∞—è–≤–∫–∞ –æ—Ç {datetime.now():%Y-%m-%d %H:%M}",
        f"user_id: [ {cid} ](tg://user?id={cid})",
        f"–§–ò–û: {escape_markdown(prof['name'])}",
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {escape_markdown(prof['phone'])}",
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {escape_markdown(SERVICES[s['cat']]['title'])}"
    ]
    for k,v in s["answers"].items():
        lines.append(f"- {escape_markdown(k)}: {escape_markdown(v)}")
    text = "\n".join(lines)

    wa_text = quote(text)
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ WhatsApp –º–µ–Ω–µ–¥–∂–µ—Ä—É", url=f"https://wa.me/{WHATSAPP.lstrip('+')}?text={wa_text}"))
    safe_send(cid, text, parse_mode="MarkdownV2", reply_markup=kb)
    safe_send(MANAGER_ID, text, parse_mode="MarkdownV2")

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã —á–∞—Ç –Ω–µ –∑–∞—Å–æ—Ä—è–ª—Å—è
    delete_previous_messages(cid)

@bot.message_handler(commands=["start","help"])
def handle_start(m):
    ensure_session(m.chat.id)
    ask_profile(m.chat.id)

@bot.callback_query_handler(func=lambda c: True)
def handle_callback(c):
    cid = c.message.chat.id
    ensure_session(cid)
    s = sessions[cid]

    cmd_val = c.data.split("|", 1)
    cmd = cmd_val[0]
    val = cmd_val[1] if len(cmd_val) > 1 else None

    if cmd == "PF":
        if val == "use" and profiles.get(cid):
            s["step"] = "category"
            ask_category(cid)
        elif val == "new":
            s["step"] = "input_fio"
            safe_send(cid, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞:")
        else:
            ask_profile(cid)

    elif cmd == "CAT":
        s["cat"] = val
        s["idx"] = 0
        s["answers"] = {}
        s["temp_brand"] = None
        s["step"] = "fields"
        ask_field(cid)

    elif cmd == "F":
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞
        if s["idx"] >= len(SERVICES[s["cat"]]["fields"]):
            show_summary(cid)
            return
        field = SERVICES[s["cat"]]["fields"][s["idx"]]
        s["answers"][field["text"]] = val
        if field["key"] == "brand":
            s["temp_brand"] = val
        s["idx"] += 1
        ask_field(cid)

    elif cmd == "BACK":
        if s["idx"] > 0:
            s["idx"] -= 1
            field = SERVICES[s["cat"]]["fields"][s["idx"]]
            s["answers"].pop(field["text"], None)
            ask_field(cid)
        else:
            s["step"] = "category"
            ask_category(cid)

    bot.answer_callback_query(c.id)

@bot.message_handler(func=lambda m: True)
def handle_message(m):
    cid = m.chat.id
    ensure_session(cid)
    s = sessions[cid]

    if s["step"] == "input_fio":
        fio = m.text.strip()
        if len(fio) < 5:
            safe_send(cid, "–§–ò–û –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–Ω—ã–º (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        profiles[cid] = {"name": fio}
        s["step"] = "input_phone"
        safe_send(cid, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: +7XXXXXXXXXX):")
    elif s["step"] == "input_phone":
        phone = m.text.strip()
        if not phone.startswith("+7") or len(phone) != 12 or not phone[2:].isdigit():
            safe_send(cid, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:")
            return
        profiles[cid]["phone"] = phone
        s["step"] = "category"
        safe_send(cid, "–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        ask_category(cid)
    else:
        safe_send(cid, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")

if __name__== "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        bot.delete_webhook()
    except Exception:
        pass
    retries = 0
    max_retries = 20
    base_delay = 5
    while retries < max_retries:
        try:
            bot.infinity_polling(skip_pending=True, timeout=60, long_polling_timeout=60)
        except Exception as e:
            delay = min(base_delay * (2 ** retries), 300)
            logger.error(f"–û—à–∏–±–∫–∞ polling: {e}, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay} —Å–µ–∫.")
            time.sleep(delay)
            retries += 1
        else:
            retries = 0
            time.sleep(1)
    logger.critical("–ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç—å –∏ —Ç–æ–∫–µ–Ω.")
