#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω–≥–æ—Å—Å—Ç—Ä–∞—Ö: Telegram-–±–æ—Ç –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
v1.3: –£—Å—Ç–æ–π—á–∏–≤—ã–π polling, –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—á–µ–Ω—å —É—Å–ª—É–≥
"""

import logging
import time
from datetime import datetime
from urllib.parse import quote

from telebot import TeleBot, types
from telebot.apihelper import ApiTelegramException
import telebot.apihelper as apihelper  # –î–ª—è –ø—Ä–æ–∫—Å–∏, —Ä–∞—Å—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

# ====================== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ======================
TOKEN      = "7373585495:AAETFfffmmyzUOCklPeMSRht7LueleUn9h0"
WHATSAPP   = "+79898325577"       # WhatsApp –º–µ–Ω–µ–¥–∂–µ—Ä–∞
MANAGER_ID = 6983437462           # Telegram ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∫–æ–ø–∏–π

# apihelper.proxy = {'https': 'socks5://user:pass@ip:port'}  # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø—Ä–æ–∫—Å–∏

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)

bot = TeleBot(TOKEN)

# ====================== –•—Ä–∞–Ω–∏–ª–∏—â–µ ======================
sessions = {}   # chat_id -> session dict
profiles = {}   # chat_id -> profile dict

# ====================== –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ ======================
SERVICES = {
    "auto": {
        "title": "–ê–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ üöó",
        "fields": [
            {"key":"brand","text":"–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è","opts":['LADA', 'Hyundai', 'Toyota', 'Kia', 'Volkswagen', 'Renault', 'Skoda', 'BMW', 'Mercedes', 'Audi', 'Ford', 'Nissan', '–î—Ä—É–≥–∞—è']},
            {"key":"model","text":"–ú–æ–¥–µ–ª—å","dynamic": True},  # –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ CAR_MODELS
            {"key":"year","text":"–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞","opts":["2025","2024","2023","2022","2021","2020","2019","2018","2017","2016","2015","2014","2013","2012","2011","2010","–î—Ä—É–≥–æ–π"]},
            {"key":"body","text":"–¢–∏–ø –∫—É–∑–æ–≤–∞","opts":["–°–µ–¥–∞–Ω","–•—ç—Ç—á–±–µ–∫","–£–Ω–∏–≤–µ—Ä—Å–∞–ª","–ö—Ä–æ—Å—Å–æ–≤–µ—Ä","–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫","–î—Ä—É–≥–æ–µ"]},
            {"key":"engine","text":"–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è","opts":["–ë–µ–Ω–∑–∏–Ω","–î–∏–∑–µ–ª—å","–≠–ª–µ–∫—Ç—Ä–æ","–ì–∏–±—Ä–∏–¥"]},
            {"key":"power","text":"–ú–æ—â–Ω–æ—Å—Ç—å (–ª.—Å.)","opts":["<100","100‚Äì150","151‚Äì200","201‚Äì300",">300"]},
            {"key":"experience","text":"–°—Ç–∞–∂ –≤–æ–¥–∏—Ç–µ–ª—è (–ª–µ—Ç)","opts":["0‚Äì3","4‚Äì10","11‚Äì20",">20"]},
            {"key":"city","text":"–ì–æ—Ä–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏","opts":["–ú–æ—Å–∫–≤–∞","–°–ü–±","–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥","–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫","–î—Ä—É–≥–æ–π"]}
        ]
    },
    "life": {
        "title": "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∂–∏–∑–Ω–∏ üë§",
        "fields": [
            {"key":"sum","text":"–°—É–º–º–∞","opts":["500k","1M","2M"]},
            {"key":"age","text":"–í–æ–∑—Ä–∞—Å—Ç","opts":["18‚Äì30","31‚Äì50","51+"]}
        ]
    },
    "health": {
        "title": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ (–î–ú–°) üè•",
        "fields": [
            {"key":"program","text":"–ü—Ä–æ–≥—Ä–∞–º–º–∞","opts":["–ë–∞–∑–æ–≤–∞—è","–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è","VIP"]},
            {"key":"age","text":"–í–æ–∑—Ä–∞—Å—Ç","opts":["18‚Äì30","31‚Äì50","51+"]},
            {"key":"region","text":"–†–µ–≥–∏–æ–Ω","opts":["–ú–æ—Å–∫–≤–∞","–°–ü–±","–î—Ä—É–≥–æ–π"]}
        ]
    },
    "property": {
        "title": "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∏–º—É—â–µ—Å—Ç–≤–∞ üè†",
        "fields": [
            {"key":"type","text":"–¢–∏–ø –∏–º—É—â–µ—Å—Ç–≤–∞","opts":["–ö–≤–∞—Ä—Ç–∏—Ä–∞","–î–æ–º","–î–∞—á–∞","–î—Ä—É–≥–æ–µ"]},
            {"key":"value","text":"–°—Ç–æ–∏–º–æ—Å—Ç—å","opts":["<1M","1M‚Äì5M",">5M"]},
            {"key":"address","text":"–ê–¥—Ä–µ—Å","opts":["–ì–æ—Ä–æ–¥—Å–∫–æ–π","–ó–∞–≥–æ—Ä–æ–¥–Ω—ã–π"]}
        ]
    },
    "travel": {
        "title": "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π ‚úàÔ∏è",
        "fields": [
            {"key":"destination","text":"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ","opts":["–ï–≤—Ä–æ–ø–∞","–ê–∑–∏—è","–†–æ—Å—Å–∏—è","–î—Ä—É–≥–æ–µ"]},
            {"key":"duration","text":"–°—Ä–æ–∫","opts":["<7 –¥–Ω–µ–π","7‚Äì14 –¥–Ω–µ–π",">14 –¥–Ω–µ–π"]},
            {"key":"type","text":"–¢–∏–ø –ø–æ–µ–∑–¥–∫–∏","opts":["–û—Ç–¥—ã—Ö","–ë–∏–∑–Ω–µ—Å","–°–ø–æ—Ä—Ç"]}
        ]
    }
}

CAR_MODELS = {
    'LADA': ['Vesta', 'Granta', 'Niva', '–î—Ä—É–≥–∞—è'],
    'Hyundai': ['Solaris', 'Creta', 'Tucson', '–î—Ä—É–≥–∞—è'],
    'Toyota': ['Camry', 'Corolla', 'RAV4', '–î—Ä—É–≥–∞—è'],
    'Kia': ['Rio', 'Sportage', 'Ceed', '–î—Ä—É–≥–∞—è'],
    'Volkswagen': ['Polo', 'Tiguan', 'Golf', '–î—Ä—É–≥–∞—è'],
    'Renault': ['Logan', 'Duster', 'Arkana', '–î—Ä—É–≥–∞—è'],
    'Skoda': ['Rapid', 'Octavia', 'Kodiaq', '–î—Ä—É–≥–∞—è'],
    'BMW': ['3 Series', '5 Series', 'X5', '–î—Ä—É–≥–∞—è'],
    'Mercedes': ['C-Class', 'E-Class', 'GLC', '–î—Ä—É–≥–∞—è'],
    'Audi': ['A4', 'A6', 'Q5', '–î—Ä—É–≥–∞—è'],
    'Ford': ['Focus', 'Fiesta', 'Kuga', '–î—Ä—É–≥–∞—è'],
    'Nissan': ['Qashqai', 'X-Trail', 'Juke', '–î—Ä—É–≥–∞—è'],
    '–î—Ä—É–≥–∞—è': ['–î—Ä—É–≥–∞—è']
}

# ====================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ======================
def ensure_session(cid):
    if cid not in sessions:
        sessions[cid] = {"step": "profile", "cat": None, "idx": 0, "answers": {}, "last": None, "temp_brand": None}

# ... (safe_send –∏ delete_last –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–∞–∫ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ)

# ====================== –û—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏ ======================
def ask_profile(cid):
    ensure_session(cid)
    delete_last(cid)
    prof = profiles.get(cid)
    kb = types.InlineKeyboardMarkup(row_width=2)
    if prof:
        kb.add(types.InlineKeyboardButton(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {prof['name']}", callback_data="PF|use"))
    kb.add(types.InlineKeyboardButton("–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="PF|new"))
    msg = safe_send(cid, "üë§ –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=kb)
    if msg:
        sessions[cid]["last"] = msg.message_id

def ask_category(cid):
    ensure_session(cid)
    delete_last(cid)
    kb = types.InlineKeyboardMarkup(row_width=2)
    for key, data in SERVICES.items():
        kb.add(types.InlineKeyboardButton(data["title"], callback_data=f"CAT|{key}"))
    msg = safe_send(cid, "üèõÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è:", reply_markup=kb)
    if msg:
        sessions[cid]["last"] = msg.message_id

def ask_field(cid):
    s = sessions[cid]
    cat, idx = s["cat"], s["idx"]
    fields = SERVICES[cat]["fields"]

    if idx >= len(fields):
        return show_summary(cid)

    field = fields[idx]
    kb = types.InlineKeyboardMarkup(row_width=3)

    # –ï—Å–ª–∏ –ø–æ–ª–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ "model" ‚Äî –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—Ä–∫–µ –∞–≤—Ç–æ
    if field.get("dynamic") and field["key"] == "model":
        brand = s.get("temp_brand")
        opts = CAR_MODELS.get(brand, CAR_MODELS['–î—Ä—É–≥–∞—è'])
    else:
        opts = field["opts"]

    for opt in opts:
        kb.add(types.InlineKeyboardButton(opt, callback_data=f"F|{opt}"))

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="BACK"))
    msg = safe_send(cid, f"–®–∞–≥ {idx+1}/{len(fields)} ‚Äî {field['text']}:", reply_markup=kb)
    if msg:
        s["last"] = msg.message_id

def show_summary(cid):
    delete_last(cid)
    s = sessions[cid]
    lines = [
        f"üìù –ó–∞—è–≤–∫–∞ –æ—Ç {datetime.now():%Y-%m-%d %H:%M}",
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {SERVICES[s['cat']]['title']}"
    ]
    for k,v in s["answers"].items():
        lines.append(f"- {k}: {v}")
    text = "\n".join(lines)

    wa_text = quote(text)
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ WhatsApp –º–µ–Ω–µ–¥–∂–µ—Ä—É", url=f"https://wa.me/{WHATSAPP.lstrip('+')}?text={wa_text}"))
    safe_send(cid, text, reply_markup=kb)
    safe_send(MANAGER_ID, f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n{text}")

# ====================== –•–µ–Ω–¥–ª–µ—Ä—ã ======================
@bot.message_handler(commands=["start","help"])
def handle_start(m):
    ensure_session(m.chat.id)
    ask_profile(m.chat.id)

@bot.callback_query_handler(func=lambda c: True)
def handle_callback(c):
    cid = c.message.chat.id
    ensure_session(cid)
    s = sessions[cid]

    cmd_val = c.data.split("|", 1)
    cmd = cmd_val[0]
    val = cmd_val[1] if len(cmd_val) > 1 else None

    if cmd == "PF":
        if val == "use" and profiles.get(cid):
            s["step"] = "category"
            ask_category(cid)
        elif val == "new":
            # –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–æ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ñ–∏–ª—è
            profiles[cid] = {"name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", "phone": "+7XXXXXXXXXX"}
            s["step"] = "category"
            ask_category(cid)
        else:
            ask_profile(cid)

    elif cmd == "CAT":
        s["cat"] = val
        s["idx"] = 0
        s["answers"] = {}
        s["temp_brand"] = None
        s["step"] = "fields"
        ask_field(cid)

    elif cmd == "F":
        field = SERVICES[s["cat"]]["fields"][s["idx"]]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
        s["answers"][field["text"]] = val

        # –ï—Å–ª–∏ –ø–æ–ª–µ –º–∞—Ä–∫–∞ –∞–≤—Ç–æ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–µ–Ω–¥ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
        if field["key"] == "brand":
            s["temp_brand"] = val

        s["idx"] += 1
        ask_field(cid)

    elif cmd == "BACK":
        if s["idx"] > 0:
            s["idx"] -= 1
            # –ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞–∑–∞–¥ —É–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            field = SERVICES[s["cat"]]["fields"][s["idx"]]
            s["answers"].pop(field["text"], None)
            ask_field(cid)
        else:
            s["step"] = "category"
            ask_category(cid)

    bot.answer_callback_query(c.id)

# ====================== –ó–∞–ø—É—Å–∫ ======================
if __name__== "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.delete_webhook()
    retries = 0
    max_retries = 20
    base_delay = 5
    while retries < max_retries:
        try:
            bot.infinity_polling(skip_pending=True, timeout=60, long_polling_timeout=60)
        except Exception as e:
            delay = min(base_delay * (2 ** retries), 300)
            logger.error(f"–û—à–∏–±–∫–∞ polling: {e}, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay} —Å–µ–∫.")
            time.sleep(delay)
            retries +=1
        else:
            retries=0
            time.sleep(1)
    logger.critical("–ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç—å –∏ —Ç–æ–∫–µ–Ω.")
