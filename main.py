#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω–≥–æ—Å—Å—Ç—Ä–∞—Ö: Telegram-–±–æ—Ç –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (Termux/Android)
v1.0: –£—Å—Ç–æ–π—á–∏–≤—ã–π polling, –ø—Ä–æ–∫—Å–∏, –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫, –∫–æ–ø–∏—è –∑–∞—è–≤–æ–∫
"""

import logging
import time
from datetime import datetime
from urllib.parse import quote

from telebot import TeleBot, types
from telebot.apihelper import ApiTelegramException
import telebot.apihelper as apihelper  # –î–ª—è –ø—Ä–æ–∫—Å–∏

# ====================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ======================
TOKEN      = "7373585495:AAETFfffmmyzUOCklPeMSRht7LueleUn9h0"
WHATSAPP   = "+79898325577"       # WhatsApp –º–µ–Ω–µ–¥–∂–µ—Ä–∞
MANAGER_ID = 6983437462           # Telegram ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∫–æ–ø–∏–π

# –ü—Ä–æ–∫—Å–∏ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±—Ö–æ–¥–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
# apihelper.proxy = {'https': 'socks5://user:pass@ip:port'}  # SOCKS5 –ø—Ä–∏–º–µ—Ä

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)

bot = TeleBot(TOKEN)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ
sessions = {}  # chat_id -> dict
profiles = {}  # chat_id -> dict

# ====================== –ö–ê–¢–ê–õ–û–ì –£–°–õ–£–ì ======================
SERVICES = {
    "auto": {
        "title": "–ê–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ (–ö–ê–°–ö–û/–û–°–ê–ì–û) üöó",
        "fields": [
            {"key":"brand","text":"–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è","opts":['LADA', 'Hyundai', 'Toyota', 'Kia', 'Volkswagen', 'Renault', 'Skoda', 'BMW', 'Mercedes', 'Audi', 'Ford', 'Nissan', '–î—Ä—É–≥–∞—è']},
            {"key":"model","text":"–ú–æ–¥–µ–ª—å","dynamic": True},  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ –±—Ä–µ–Ω–¥—É
            {"key":"year","text":"–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞","opts":["2025","2024","2023","2022","2021","2020","2019","2018","2017","2016","2015","2014","2013","2012","2011","2010","–î—Ä—É–≥–æ–π"]},
            {"key":"body","text":"–¢–∏–ø –∫—É–∑–æ–≤–∞","opts":["–°–µ–¥–∞–Ω","–•—ç—Ç—á–±–µ–∫","–£–Ω–∏–≤–µ—Ä—Å–∞–ª","–ö—Ä–æ—Å—Å–æ–≤–µ—Ä","–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫","–î—Ä—É–≥–æ–µ"]},
            {"key":"engine","text":"–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è","opts":["–ë–µ–Ω–∑–∏–Ω","–î–∏–∑–µ–ª—å","–≠–ª–µ–∫—Ç—Ä–æ","–ì–∏–±—Ä–∏–¥"]},
            {"key":"power","text":"–ú–æ—â–Ω–æ—Å—Ç—å (–ª.—Å.)","opts":["<100","100‚Äì150","151‚Äì200","201‚Äì300",">300"]},
            {"key":"experience","text":"–°—Ç–∞–∂ –≤–æ–¥–∏—Ç–µ–ª—è (–ª–µ—Ç)","opts":["0‚Äì3","4‚Äì10","11‚Äì20",">20"]},
            {"key":"city","text":"–ì–æ—Ä–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏","opts":["–ú–æ—Å–∫–≤–∞","–°–ü–±","–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥","–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫","–î—Ä—É–≥–æ–π"]}
        ]
    },
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–î–ú–°, –∏–º—É—â–µ—Å—Ç–≤–æ –∏ —Ç.–¥.)
}

CAR_MODELS = {
    'LADA': ['Vesta', 'Granta', 'Niva', '–î—Ä—É–≥–∞—è'],
    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏)
    '–î—Ä—É–≥–∞—è': ['–î—Ä—É–≥–∞—è']
}

# ====================== –§–£–ù–ö–¶–ò–ò ======================
def safe_send(cid, *a, **kw):
    for _ in range(3):
        try:
            return bot.send_message(cid, *a, **kw)
        except ApiTelegramException:
            time.sleep(1)
    return None

def delete_last(cid):
    s = sessions.get(cid)
    if s and s.get("last"):
        try: bot.delete_message(cid, s["last"])
        except: pass
        s["last"] = None

# –®–∞–≥–∏ (–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
def ask_profile(cid):
    ensure_session(cid)
    delete_last(cid)
    prof = profiles.get(cid)
    kb = types.InlineKeyboardMarkup(row_width=2)
    if prof:
        kb.add(types.InlineKeyboardButton(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {prof['name']}", callback_data="PF|use"))
    kb.add(types.InlineKeyboardButton("–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="PF|new"))
    msg = safe_send(cid, "üë§ –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=kb)
    if msg:
        sessions[cid]["last"] = msg.message_id

# (–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: ask_category, ask_subservice, ask_field, show_summary ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏)

# –ó–∞–ø—É—Å–∫ —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.delete_webhook()
    retries = 0
    while True:
        try:
            bot.infinity_polling(timeout=60, long_polling_timeout=60)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15—Å")
            time.sleep(15)
            retries += 1
            if retries > 5:
                logger.error("–ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç/–ø—Ä–æ–∫—Å–∏")
                time.sleep(60)  # –î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞
                retries = 0
