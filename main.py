#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω–≥–æ—Å—Å—Ç—Ä–∞—Ö: Telegram-–±–æ—Ç –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
v1.1: –£—Å—Ç–æ–π—á–∏–≤—ã–π polling, –∞–Ω–∫–µ—Ç–∞, WhatsApp, –∫–æ–ø–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É
"""

import logging
import time
from datetime import datetime
from urllib.parse import quote
from telebot import TeleBot, types
from telebot.apihelper import ApiTelegramException

# ====================== –ö–û–ù–§–ò–ì ======================
TOKEN      = "7373585495:AAETFfffmmyzUOCklPeMSRht7LueleUn9h0"
WHATSAPP   = "+79898325577"
MANAGER_ID = 6983437462

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)
logger = logging.getLogger(__name__)

bot = TeleBot(TOKEN)

# ====================== –î–ê–ù–ù–´–ï ======================
sessions = {}   # chat_id -> dict
profiles = {}   # chat_id -> dict

SERVICES = {
    "auto": {
        "title": "–ê–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ (–ö–ê–°–ö–û/–û–°–ê–ì–û) üöó",
        "fields": [
            {"key":"brand","text":"–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è","opts":['LADA','Hyundai','Toyota','Kia','Volkswagen','Renault','BMW','Mercedes','Audi','Ford','Nissan','–î—Ä—É–≥–∞—è']},
            {"key":"model","text":"–ú–æ–¥–µ–ª—å","opts":["–ú–æ–¥–µ–ª—å A","–ú–æ–¥–µ–ª—å B","–î—Ä—É–≥–∞—è"]},
            {"key":"year","text":"–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞","opts":["2025","2024","2023","2022","2021","–î—Ä—É–≥–æ–µ"]},
            {"key":"power","text":"–ú–æ—â–Ω–æ—Å—Ç—å (–ª.—Å.)","opts":["<100","100‚Äì150","151‚Äì200","201‚Äì300",">300"]}
        ]
    },
    "life": {
        "title": "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∂–∏–∑–Ω–∏ üë§",
        "fields": [
            {"key":"sum","text":"–°—É–º–º–∞","opts":["500k","1M","2M"]},
            {"key":"age","text":"–í–æ–∑—Ä–∞—Å—Ç","opts":["18‚Äì30","31‚Äì50","51+"]}
        ]
    }
}

# ====================== –£–¢–ò–õ–ò–¢–´ ======================
def ensure_session(cid):
    if cid not in sessions:
        sessions[cid] = {"step":"profile","cat":None,"idx":0,"answers":{},"last":None}

def safe_send(cid, *a, **kw):
    for _ in range(3):
        try:
            return bot.send_message(cid, *a, **kw)
        except ApiTelegramException as e:
            logger.warning(e)
            time.sleep(1)
    return None

def delete_last(cid):
    s = sessions.get(cid)
    if s and s.get("last"):
        try:
            bot.delete_message(cid, s["last"])
        except:
            pass
        s["last"] = None

# ====================== –®–ê–ì–ò ======================
def ask_profile(cid):
    ensure_session(cid)
    delete_last(cid)
    prof = profiles.get(cid)
    kb = types.InlineKeyboardMarkup(row_width=2)
    if prof:
        kb.add(types.InlineKeyboardButton(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {prof['name']}", callback_data="PF|use"))
    kb.add(types.InlineKeyboardButton("–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="PF|new"))
    msg = safe_send(cid, "üë§ –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=kb)
    if msg: sessions[cid]["last"] = msg.message_id

def ask_category(cid):
    delete_last(cid)
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ê–≤—Ç–æ üöó", callback_data="CAT|auto"))
    kb.add(types.InlineKeyboardButton("–ñ–∏–∑–Ω—å üë§", callback_data="CAT|life"))
    msg = safe_send(cid, "üèõÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
    if msg: sessions[cid]["last"] = msg.message_id

def ask_field(cid):
    s = sessions[cid]
    cat = s["cat"]
    idx = s["idx"]
    fields = SERVICES[cat]["fields"]
    if idx >= len(fields):
        return show_summary(cid)

    fld = fields[idx]
    kb = types.InlineKeyboardMarkup(row_width=2)
    for opt in fld["opts"]:
        kb.add(types.InlineKeyboardButton(opt, callback_data=f"F|{opt}"))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="BACK"))
    msg = safe_send(cid, f"–®–∞–≥ {idx+1}/{len(fields)} ‚Äî {fld['text']}:", reply_markup=kb)
    if msg: s["last"] = msg.message_id

def show_summary(cid):
    delete_last(cid)
    s = sessions[cid]
    lines = [
        f"üìù –ó–∞—è–≤–∫–∞ –æ—Ç {datetime.now():%Y-%m-%d %H:%M}",
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {SERVICES[s['cat']]['title']}"
    ]
    for k,v in s["answers"].items():
        lines.append(f"- {k}: {v}")
    text = "\n".join(lines)

    wa_text = quote(text)
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üì© WhatsApp –º–µ–Ω–µ–¥–∂–µ—Ä—É", url=f"https://wa.me/{WHATSAPP.lstrip('+')}?text={wa_text}"))
    safe_send(cid, text, reply_markup=kb)
    safe_send(MANAGER_ID, f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n{text}")

# ====================== –•–ï–ù–î–õ–ï–†–´ ======================
@bot.message_handler(commands=["start","help"])
def handle_start(m):
    ensure_session(m.chat.id)
    ask_profile(m.chat.id)

@bot.callback_query_handler(func=lambda c: True)
def handle_cb(c):
    cid = c.message.chat.id
    ensure_session(cid)
    s = sessions[cid]
    cmd, val = c.data.split("|",1) if "|" in c.data else (c.data,None)

    if cmd=="PF":
        if val=="use":
            ask_category(cid)
        else:
            profiles[cid] = {"name":"–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤","phone":"+7XXXXXXXXXX"}
            ask_category(cid)

    elif cmd=="CAT":
        s["cat"] = val
        s["idx"] = 0
        s["answers"] = {}
        ask_field(cid)

    elif cmd=="F":
        fld = SERVICES[s["cat"]]["fields"][s["idx"]]
        s["answers"][fld["text"]] = val
        s["idx"] += 1
        ask_field(cid)

    elif cmd=="BACK":
        if s["idx"]>0:
            s["idx"] -= 1
            ask_field(cid)
        else:
            ask_category(cid)

    bot.answer_callback_query(c.id)

# ====================== –ó–ê–ü–£–°–ö ======================
if __name__=="__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.delete_webhook()
    retries = 0
    while True:
        try:
            bot.infinity_polling(skip_pending=True, timeout=60, long_polling_timeout=60)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ polling: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15—Å")
            time.sleep(15)
            retries += 1
            if retries > 5:
                retries = 0
                time.sleep(60)
